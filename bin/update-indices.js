/* eslint-disable no-console */
const fs = require('fs');
const path = require('path');
const types = [
  'android',
  'asha',
  'bada',
  'brew',
  'feature',
  'firefoxos',
  'kddi',
  'palmos',
  's30plus',
  's40',
  'symbian',
  'tizen',
  'touchwiz',
  'wm',
  'wp',
];
const useWeb = true;
/**
 * Write to file the regex for the specified type
 * @param {string} type
 */
function updateIndeces(type) {
  console.log(`creating index for data/models-${type}.js`);
  const typeName = `${type.toUpperCase()}_MODELS`;
  const list = require(`../data/models-${type}.js`)[typeName];
  let index = {};
  let keys;
  Object.keys(list).forEach((key) => {
    if (key.endsWith('!!')) {
      // keys = getKeysFromRegexp(key.substring(key.length() - 2));
    } else if (key.endsWith('!')) {
      // keys = getKeysFromRegexp(key.substring(key.length() - 1));
    } else {
      keys = [key.toUpperCase().substring(0, 2)];
    }
    keys.forEach((internalKey) => {
      let value = list[internalKey];
      if (value === '**') {
        value = '';
      }

      if (!index[`@${value}`]) {
        index[`@${value}`] = [];
      }
      index[`@${value}`].push(key);
    });
  });

  index = ksort(index);

  fs.writeFileSync(
    path.join(__dirname, `../data/indices/models-${type}.js`),
    '/* This file is automatically generated, do not edit manually! */\n\n' +
      '/* eslint-disable */\n\n' +
      `exports.${type.toUpperCase()}_INDEX = ${JSON.stringify(index)};`
  );
  console.log(`${type} index contains ${Object.keys(index).length + 1} keys\n`);
}

/**
 * Write to file the regex for the specified type
 * @param {string} type
 */
function updateIndecesFromWeb(type) {
  const request = require('request');
  const fs = require('fs');
  const path = require('path');

  console.log(`Updating indices models-${type}...`);
  const filepath = path.join(__dirname, `../data/indices/models-${type}.js`);
  const fileStream = fs.createWriteStream(filepath);
  request(
    `https://raw.githubusercontent.com/WhichBrowser/Parser/master/data/indices/models-${type}.php`,
    (err, response = {}) => {
      if (err) {
        return;
      }

      let result = response.body.match(/array \(([\s\S]*)\);/)[1];

      // Replace '@50' =>  with '@50':
      result = result.replace(/('@.*') =>/g, '$1:');

      // replace array ( with [ and ), with ]
      result = result.replace(/array \(/g, '[').replace(/\),/g, '],');

      result = result.replace(/\d+ =>/g, '');

      // Write down file
      fileStream.write('/* This file is automatically generated, do not edit manually! */\n\n');
      fileStream.write('/* eslint-disable */\n\n');
      fileStream.write(`exports.${type.toUpperCase()}_INDEX = {\n${result}};\n\n`);
      fileStream.write('/* This file is automatically generated, do not edit manually! */\n');
      fileStream.end();
      console.log(`Downloaded new application-${type}...`);
    }
  );
}
/**
 * Sort object by keys
 * @param {object} obj
 * @return {object}
 */
const ksort = (obj) =>
  Object.keys(obj)
    .sort()
    .reduce((acc, val) => Object.assign(acc, { [val]: obj[val] }), {});

types.forEach(useWeb ? updateIndecesFromWeb : updateIndeces);
